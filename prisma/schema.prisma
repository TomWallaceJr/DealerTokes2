generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ------------ App models ------------
 */
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String? // for credentials login
  createdAt    DateTime @default(now())

  // Relations
  shifts   Shift[]
  accounts Account[]
  sessions Session[]
}

model Shift {
  id     String   @id @default(cuid())
  userId String
  date   DateTime
  casino String

  // renamed in UI only
  hours Float

  // Cash inputs
  tokesCash Int @default(0) // "Cash Tokes" (kept as whole dollars)
  downs     Int @default(0) // "Cash Downs"

  // Tournament inputs
  tournamentDowns       Int   @default(0)
  tournamentRatePerDown Float @default(0)

  // Hourly pay (if any)
  hourlyRate Float @default(0)

  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId, date])
}

/**
 * ------------ NextAuth / Auth.js models ------------
 */
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/** ------------ App models ------------ */
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String?
  createdAt    DateTime @default(now())

  // Relations
  shifts   Shift[]
  accounts Account[]
  sessions Session[]
}

model Shift {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime            // store UTC midnight by convention
  casino    String

  hours     Float               // quarter increments (.25)
  hourlyRate Float   @default(0)
  tokesCash Int      @default(0)
  jackpotTips Int    @default(0)
  downs     Float    @default(0) // quarter increments (.25)

  // Tournament metrics (optional)
  tournamentDowns Float   @default(0)
  tournamentRate  Float   @default(0) // $ per tournament down

  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  // Ensure one shift per date per user (your date router relies on this)
  @@unique([userId, date])

  // Helpful indexes
  @@index([userId, createdAt])
  @@index([userId, date])
}

/** ------------ NextAuth / Auth.js models ------------ */
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
